name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage

      - name: Build application
        run: npm run build

      - name: Validate app.config.json
        run: |
          echo "üìã Validando configura√ß√£o da aplica√ß√£o..."

          # Verificar se app.config.json existe e √© v√°lido
          if [ ! -f "app.config.json" ]; then
            echo "‚ùå app.config.json n√£o encontrado"
            exit 1
          fi

          # Validar JSON
          cat app.config.json | jq empty
          echo "‚úÖ app.config.json √© um JSON v√°lido"

          # Verificar campos obrigat√≥rios
          REQUIRED_FIELDS=("application.name" "application.version" "application.runtime" "resources.handler")

          for field in "${REQUIRED_FIELDS[@]}"; do
            VALUE=$(cat app.config.json | jq -r ".$field" 2>/dev/null)
            if [ "$VALUE" = "null" ] || [ -z "$VALUE" ]; then
              echo "‚ùå Campo obrigat√≥rio ausente: $field"
              exit 1
            else
              echo "‚úÖ $field: $VALUE"
            fi
          done

      - name: Check build artifacts
        run: |
          echo "üì¶ Verificando artefatos do build..."

          if [ ! -f "dist/main.js" ]; then
            echo "‚ùå Artefato principal n√£o encontrado: dist/main.js"
            exit 1
          fi

          if [ ! -f "dist/manifest.json" ]; then
            echo "‚ùå Manifest n√£o encontrado: dist/manifest.json"
            exit 1
          fi

          echo "‚úÖ Todos os artefatos est√£o presentes"

          # Mostrar informa√ß√µes do manifest
          echo "üìã Informa√ß√µes do manifest:"
          cat dist/manifest.json | jq .

      - name: Security scan
        run: |
          echo "üîí Executando verifica√ß√µes de seguran√ßa..."

          # Verificar por depend√™ncias vulner√°veis
          npm audit --audit-level moderate

          # Verificar por secrets hardcoded (b√°sico)
          echo "üîç Verificando por poss√≠veis secrets..."
          if grep -r -i -E "(password|secret|key|token).*=.*['\"][a-zA-Z0-9]{20,}" src/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è  Poss√≠veis secrets encontrados. Revise o c√≥digo acima."
          else
            echo "‚úÖ Nenhum secret √≥bvio encontrado"
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ü§ñ Valida√ß√£o autom√°tica')
            );

            const status = '${{ job.status }}' === 'success' ? '‚úÖ Passou' : '‚ùå Falhou';
            const body = `ü§ñ **Valida√ß√£o autom√°tica do PR**

            **Status:** ${status}
            **Commit:** \`${context.sha.substring(0, 7)}\`
            **Executado em:** ${new Date().toISOString()}

            **Verifica√ß√µes realizadas:**
            - ‚úÖ Lint do c√≥digo
            - ‚úÖ Testes unit√°rios
            - ‚úÖ Build da aplica√ß√£o
            - ‚úÖ Valida√ß√£o da configura√ß√£o
            - ‚úÖ Verifica√ß√£o de seguran√ßa b√°sica

            ${status.includes('‚ùå') ? '‚ö†Ô∏è **A√ß√£o necess√°ria:** Corrija os erros nos logs acima antes do merge.' : 'üéâ **Pronto para merge!** Todas as valida√ß√µes passaram.'}`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
